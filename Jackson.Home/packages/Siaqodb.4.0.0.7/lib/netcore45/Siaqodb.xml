<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Siaqodb</name>
  </assembly>
  <members>
    <member name="T:Sqo.AsyncLock">
      <summary>
            Defines a critical section with a mutual-exclusion lock.
            </summary>
    </member>
    <member name="M:Sqo.AsyncLock.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Sqo.AsyncLock" /> class.
            </summary>
    </member>
    <member name="M:Sqo.AsyncLock.LockAsync(System.Type,System.Boolean@)">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Sqo.Internal._bs">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._ofm(System.String,System.String)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
      <param name="p">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Internal._bs._uf(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Object)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._gd(Sqo.Siaqodb,System.Type)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._do(Sqo.Siaqodb,System.Int32,Sqo.MetaType)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._io(Sqo.Siaqodb,Sqo.MetaType)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._sdbfn(Sqo.Siaqodb,Sqo.MetaType,System.String)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._loidtid(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Collections.Generic.List{System.Int32}@,System.Int32@)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._ltid(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Int32@,System.Boolean@)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._loidby(Sqo.Siaqodb,System.String,System.Object)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._lobjby(Sqo.Siaqodb,System.Type,System.Int32)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Sqo.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
    <!-- Badly formed XML comment ignored for member "T:Sqo.Evaluator.SubtreeEvaluator" -->
    <!-- Badly formed XML comment ignored for member "T:Sqo.Evaluator.Nominator" -->
    <member name="T:Sqo.ObjectList`1">
      <summary>
            List used to retrieve objects from database
            </summary>
      <typeparam name="T">Type of objects from list</typeparam>
    </member>
    <member name="T:Sqo.Siaqodb">
      <summary>
            Main class of siaqodb database engine responsible for storing, retrieving ,deleting objects on database files
            </summary>
    </member>
    <member name="M:Sqo.Siaqodb.#ctor">
      <summary>
            Create a new instance of Siaqodb, database is not opened yet
            </summary>
    </member>
    <member name="M:Sqo.Siaqodb.OpenAsync(Windows.Storage.StorageFolder)">
      <summary>
            Open database folder
            </summary>
      <param name="databaseFolder">path where objects are stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.Open(Windows.Storage.StorageFolder)">
      <summary>
            Open database folder
            </summary>
      <param name="databaseFolder">path where objects are stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObject(System.Object)">
      <summary>
            Insert or update object; if object is loaded from database and this method is called then update will occur, if object is new created then insert will occur
            </summary>
      <param name="obj">Object to be stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObjectAsync(System.Object)">
      <summary>
            Insert or update object; if object is loaded from database and this method is called then update will occur, if object is new created then insert will occur
            </summary>
      <param name="obj">Object to be stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObjectPartially(System.Object,System.String[])">
      <summary>
             Insert or update object partially, only provided properties are saved
            </summary>
      <param name="obj">object of which properties will be stored</param>
      <param name="properties">properties to be stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObjectPartiallyAsync(System.Object,System.String[])">
      <summary>
             Insert or update object partially, only provided properties are saved
            </summary>
      <param name="obj">object of which properties will be stored</param>
      <param name="properties">properties to be stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObjectPartially(System.Object,System.Boolean,System.String[])">
      <summary>
              Insert or update object partially, only provided properties are saved 
             </summary>
      <param name="obj">object of which properties will be stored</param>
      <param name="properties">properties to be stored</param>
      <param name="onlyReferences">if true,it will store only references to complex objects</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObjectPartiallyAsync(System.Object,System.Boolean,System.String[])">
      <summary>
              Insert or update object partially, only provided properties are saved 
             </summary>
      <param name="obj">object of which properties will be stored</param>
      <param name="properties">properties to be stored</param>
      <param name="onlyReferences">if true,it will store only references to complex objects</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObject(System.Object,Sqo.Transactions.ITransaction)">
      <summary>
            Insert or update object by a Transaction; if object is loaded from database and this method is called then update will occur, if object is new created then insert will occur
            </summary>
      <param name="obj">Object to be stored</param>
      <param name="transaction">Transaction object</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObjectAsync(System.Object,Sqo.Transactions.ITransaction)">
      <summary>
            Insert or update object by a Transaction; if object is loaded from database and this method is called then update will occur, if object is new created then insert will occur
            </summary>
      <param name="obj">Object to be stored</param>
      <param name="transaction">Transaction object</param>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAll``1">
      <summary>
            Load all objects of Type provided
            </summary>
      <typeparam name="T">Type of objects to be loaded from database</typeparam>
      <returns>List of objects retrieved from database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAllAsync``1">
      <summary>
            Load all objects of Type provided
            </summary>
      <typeparam name="T">Type of objects to be loaded from database</typeparam>
      <returns>List of objects retrieved from database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadObjectByOID``1(System.Int32)">
      <summary>
            Load object from database by OID provided
            </summary>
      <typeparam name="T">The Type of object to be loaded</typeparam>
      <param name="oid">oid of object</param>
      <returns>the object stored in database with oid provided</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadObjectByOIDAsync``1(System.Int32)">
      <summary>
            Load object from database by OID provided
            </summary>
      <typeparam name="T">The Type of object to be loaded</typeparam>
      <param name="oid">oid of object</param>
      <returns>the object stored in database with oid provided</returns>
    </member>
    <member name="M:Sqo.Siaqodb.Close">
      <summary>
            Close database
            </summary>
    </member>
    <member name="M:Sqo.Siaqodb.CloseAsync">
      <summary>
            Close database
            </summary>
    </member>
    <member name="M:Sqo.Siaqodb.Cast``1">
      <summary>
            Cast method to be used in LINQ queries
            </summary>
      <typeparam name="T">Type over which LINQ will take action</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.Query``1">
      <summary>
            Query method to be used in LINQ queries
            </summary>
      <typeparam name="T">Type over which LINQ will take action</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadOids``1(System.Linq.Expressions.Expression)">
      <summary>
            Load OIDs by expression
            </summary>
      <typeparam name="T">Type for which OIDs will be loaded</typeparam>
      <param name="expression">filter expression</param>
      <returns>List of OIDs</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadOidsAsync``1(System.Linq.Expressions.Expression)">
      <summary>
            Load OIDs by expression
            </summary>
      <typeparam name="T">Type for which OIDs will be loaded</typeparam>
      <param name="expression">filter expression</param>
      <returns>List of OIDs</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAllOIDs(Sqo.MetaType)">
      <summary>
            Load all object OIDs of MetaType provided
            </summary>
      <param name="type">meta type Load by method GetAllTypes()</param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAllOIDsAsync(Sqo.MetaType)">
      <summary>
            Load all object OIDs of MetaType provided
            </summary>
      <param name="type">meta type Load by method GetAllTypes()</param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadValue(System.Int32,System.String,Sqo.MetaType)">
      <summary>
            Load value of a field of an object identified by OID provided
            </summary>
      <param name="oid">OID of object</param>
      <param name="fieldName">fieldName</param>
      <param name="mt">MetaType</param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadValueAsync(System.Int32,System.String,Sqo.MetaType)">
      <summary>
            Load value of a field of an object identified by OID provided
            </summary>
      <param name="oid">OID of object</param>
      <param name="fieldName">fieldName</param>
      <param name="mt">MetaType</param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.Delete(System.Object)">
      <summary>
            Delete an object from database
            </summary>
      <param name="obj">Object to be deleted</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteAsync(System.Object)">
      <summary>
            Delete an object from database
            </summary>
      <param name="obj">Object to be deleted</param>
    </member>
    <member name="M:Sqo.Siaqodb.Delete(System.Object,Sqo.Transactions.ITransaction)">
      <summary>
            Delete an object from database using a Transaction
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="transaction">Transaction</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteAsync(System.Object,Sqo.Transactions.ITransaction)">
      <summary>
            Delete an object from database using a Transaction
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="transaction">Transaction</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.String,System.Object)">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldName">Names of field that this method will lookup for object to delete it</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectByAsync(System.String,System.Object)">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldName">Names of field that this method will lookup for object to delete it</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Object,System.String[])">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldNames">Names of fields that this method will lookup for object to delete it</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectByAsync(System.Object,System.String[])">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldNames">Names of fields that this method will lookup for object to delete it</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Object,Sqo.Transactions.ITransaction,System.String[])">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldNames">Names of fields that this method will lookup for object to delete it</param>
      <param name="transaction">Transaction object</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectByAsync(System.Object,Sqo.Transactions.ITransaction,System.String[])">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldNames">Names of fields that this method will lookup for object to delete it</param>
      <param name="transaction">Transaction object</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Delete an object from database by a criteria
            </summary>
      <param name="criteria">Pairs of fields-values to lookup for object to delete it</param>
      <returns>Number of objects deleted</returns>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Delete an object from database by a criteria
            </summary>
      <param name="criteria">Pairs of fields-values to lookup for object to delete it</param>
      <returns>Number of objects deleted</returns>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectByAsync(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Delete an object from database by a criteria
            </summary>
      <param name="criteria">Pairs of fields-values to lookup for object to delete it</param>
      <returns>Number of objects deleted</returns>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectByAsync``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Delete an object from database by a criteria
            </summary>
      <param name="criteria">Pairs of fields-values to lookup for object to delete it</param>
      <returns>Number of objects deleted</returns>
    </member>
    <member name="M:Sqo.Siaqodb.DropType``1">
      <summary>
            Delete all objects of Type provided
            </summary>
      <typeparam name="T">Type of objects to be deleted</typeparam>
    </member>
    <member name="M:Sqo.Siaqodb.DropTypeAsync``1">
      <summary>
            Delete all objects of Type provided
            </summary>
      <typeparam name="T">Type of objects to be deleted</typeparam>
    </member>
    <member name="M:Sqo.Siaqodb.DropType(System.Type)">
      <summary>
            Delete all objects of Type provided
            </summary>
      <param name="type">Type of objects to be deleted</param>&gt;
        </member>
    <member name="M:Sqo.Siaqodb.DropTypeAsync(System.Type)">
      <summary>
            Delete all objects of Type provided
            </summary>
      <param name="type">Type of objects to be deleted</param>&gt;
        </member>
    <member name="M:Sqo.Siaqodb.DropType(System.Type,System.Boolean)">
      <summary>
             Delete all objects of Type provided
            </summary>
      <param name="type">Type of objects to be deleted</param>
      <param name="claimFreespace">If this is TRUE all dynamic length data associated with objects will be marked as free and Shrink method is able to free the space</param>
    </member>
    <member name="M:Sqo.Siaqodb.DropTypeAsync(System.Type,System.Boolean)">
      <summary>
             Delete all objects of Type provided
            </summary>
      <param name="type">Type of objects to be deleted</param>
      <param name="claimFreespace">If this is TRUE all dynamic length data associated with objects will be marked as free and Shrink method is able to free the space</param>
    </member>
    <member name="M:Sqo.Siaqodb.GetAllTypes">
      <summary>
            Return all Types from database folder
            </summary>
      <returns>List of MetaType objects</returns>
    </member>
    <member name="M:Sqo.Siaqodb.GetAllTypesAsync">
      <summary>
            Return all Types from database folder
            </summary>
      <returns>List of MetaType objects</returns>
    </member>
    <member name="M:Sqo.Siaqodb.Count``1">
      <summary>
            Return number of objects of Type provided
            </summary>
      <typeparam name="T">Type of objects</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.CountAsync``1">
      <summary>
            Return number of objects of Type provided
            </summary>
      <typeparam name="T">Type of objects</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.ExportToXML``1(System.Xml.XmlWriter)">
      <summary>
            Export to XML all objects of Type provided from database
            </summary>
      <typeparam name="T">Type of objects to be exported</typeparam>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:Sqo.Siaqodb.ExportToXML``1(System.Xml.XmlWriter,System.Collections.Generic.IList{``0})">
      <summary>
            Export to XML list of objects provided
            </summary>
      <typeparam name="T">Type of objects</typeparam>
      <param name="writer">XmlWriter</param>
      <param name="objects">list of objects to be exported</param>
    </member>
    <member name="M:Sqo.Siaqodb.ImportFromXML``1(System.Xml.XmlReader)">
      <summary>
            Import from XML objects and return a list of them
            </summary>
      <typeparam name="T">Type of objects to be imported</typeparam>
      <param name="reader">XmlReader</param>
      <returns>List of objects imported</returns>
    </member>
    <member name="M:Sqo.Siaqodb.ImportFromXML``1(System.Xml.XmlReader,System.Boolean)">
      <summary>
            Import from XML objects and return a list and save into database
            </summary>
      <typeparam name="T">Type of objects to be imported</typeparam>
      <param name="reader">XmlReader</param>
      <param name="importIntoDB">if TRUE objects are saved also in database</param>
      <returns>List of objects imported</returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.String,System.Object)">
      <summary>
            Update an object in database by a certain Field(eq: ID that come from a server)
            </summary>
      <param name="fieldName">FieldName by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectByAsync(System.String,System.Object)">
      <summary>
            Update an object in database by a certain Field(eq: ID that come from a server)
            </summary>
      <param name="fieldName">FieldName by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.Object,System.String[])">
      <summary>
            Update an object in database by certain Fields(eq: ID that come from a server)
            </summary>
      <param name="fieldNames">name of fields by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectByAsync(System.Object,System.String[])">
      <summary>
            Update an object in database by certain Fields(eq: ID that come from a server)
            </summary>
      <param name="fieldNames">name of fields by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.Object,Sqo.Transactions.ITransaction,System.String[])">
      <summary>
            Update an object in database by certain Fields(eq: ID that come from a server)
            </summary>
      <param name="fieldNames">name of fields by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <param name="transaction">Transaction object</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectByAsync(System.Object,Sqo.Transactions.ITransaction,System.String[])">
      <summary>
            Update an object in database by certain Fields(eq: ID that come from a server)
            </summary>
      <param name="fieldNames">name of fields by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <param name="transaction">Transaction object</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.GetDBPath">
      <summary>
            return current database path
            </summary>
      <returns>The database folder path</returns>
    </member>
    <member name="M:Sqo.Siaqodb.BeginTransaction">
      <summary>
            Start a database Transaction to be used on insert/update/delete objects
            </summary>
      <returns> Transaction object</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadIndexValues``2(System.String)">
      <summary>
            Get a list of unique values for a field index
            </summary>
      <typeparam name="T">Type where index is defined</typeparam>
      <typeparam name="TIndex">Type of field indexed</typeparam>
      <param name="fieldName">Name of field or automatic property which is indexed</param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAllLazy``1">
      <summary>
            Load all objects in Lazy mode, objects are activated/read from db when it is accessed
            by index or by enumerator
            </summary>
      <typeparam name="T">Type of objects to be loaded from database</typeparam>
      <returns>LazyObjectList of objects</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAllLazyAsync``1">
      <summary>
            Load all objects in Lazy mode, objects are activated/read from db when it is accessed
            by index or by enumerator
            </summary>
      <typeparam name="T">Type of objects to be loaded from database</typeparam>
      <returns>LazyObjectList of objects</returns>
    </member>
    <member name="M:Sqo.Siaqodb.GetOID(System.Object)">
      <summary>
            Get OID of object, if the Type of object has not defined OID property then object and OID are weak cached during object load from database and this value is returned,
            otherwise it is returned value of the OID property 
            </summary>
      <param name="obj">The object for which OID is returned</param>
      <returns>The OID associated with object that is stored in database</returns>
    </member>
    <member name="E:Sqo.Siaqodb.SavingObject">
      <summary>
            Raised before an object is saved in database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.SavedObject">
      <summary>
            Raised after an object is saved in database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.DeletingObject">
      <summary>
            Raised before an object is deleted from database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.DeletedObject">
      <summary>
            Raised after an object is deleted from database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.LoadingObject">
      <summary>
            Raised before an object is loaded from database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.LoadedObject">
      <summary>
            Raised after object is loaded from database
            </summary>
    </member>
    <member name="T:Sqo.SiaqodbConfigurator">
      <summary>
            Class responsible for configurations of Siaqodb database engine
            </summary>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddIndex(System.String,System.Type)">
      <summary>
            Add an index for a field or automatic property of a certain Type,an Index can be added also by using Attribute: Sqo.Attributes.Index;
            both ways of adding index are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddUniqueConstraint(System.String,System.Type)">
      <summary>
            Add an UniqueConstraint for a field of a certain Type,an UniqueConstraint can be added also by using Attribute: Sqo.Attributes.UniqueConstraint;
            both ways of adding UniqueConstraint are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddMaxLength(System.String,System.Int32,System.Type)">
      <summary>
            Put MaxLength for a string field or automatic property of a Type, MaxLength can be set also by using Attribute: Sqo.Attributes.MaxLength
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="maxLength">max length for a string</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddIgnore(System.String,System.Type)">
      <summary>
            Ignore a field or automatic property to be stored
            </summary>
      <param name="field">Name of field or automatic property</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddText(System.String,System.Type)">
      <summary>
            Mark field to be stored as a string with unlimited length 
            </summary>
      <param name="field">Name of field or automatic property</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddDocument(System.String,System.Type)">
      <summary>
            Mark a field or automatic property of a certain Type to be serialized as a Document ,it can be added also by using Attribute: Sqo.Attributes.Document;
            both ways of set as Document are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.PropertyUseField(System.String,System.String,System.Type)">
      <summary>
            Set the name of backing field for a property in case engine cannto discover it, this also can be set by attribute: Sqo.Attributes.UseVariable
            </summary>
      <param name="propertyName">Name of property</param>
      <param name="fieldName">Name of backing field of property</param>
      <param name="type">
      </param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetEncryptionPassword(System.String)">
      <summary>
            Set the password for encryption algorithm used to encrypt database data
            </summary>
      <param name="pwd">The password</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetEncryptor(Sqo.Encryption.IEncryptor)">
      <summary>
            Set your custom encryption algorithm that implemets IEncryptor interface
            </summary>
      <param name="encryptor">The instance of custom encryption algorithm</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetEncryptor(Sqo.BuildInAlgorithm)">
      <summary>
            Set build-in encryption algorithm 
            </summary>
      <param name="alg">Encryption algorithm</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetDatabaseFileName``1(System.String)">
      <summary>
            Set custom fileName on disk of database file for Type T
            </summary>
      <typeparam name="T">Type of objects</typeparam>
      <param name="fileName">Name of database file on disk</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Sqo.SiaqodbConfigurator.SetDatabaseFileName(System.Type,System.String)" -->
    <member name="M:Sqo.SiaqodbConfigurator.LoadRelatedObjects``1(System.Boolean)">
      <summary>
            By default this is true for all types. Set this to false to not load childs entities of objects of Type provided
            </summary>
      <typeparam name="T">Type for objects</typeparam>
      <param name="loadRelatedObjects">true if related object need to be loaded, false if you want to load by Include(...) method</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.LoadRelatedObjects(System.Type,System.Boolean)">
      <summary>
            By default this is true for all types. Set this to false to not load childs entities of objects of Type provided
            </summary>
      <param name="type">Type for objects</param>
      <param name="loadRelatedObjects">true if related object need to be loaded, false if you want to load by Include(...) method</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetLicense(System.String)">
      <summary>
            Set the license key
            </summary>
      <param name="licenseKey">License key</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetRaiseLoadEvents(System.Boolean)">
      <summary>
            Set true to raise Loading/Loaded events
            </summary>
      <param name="raiseLoadEvents">
      </param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetDocumentSerializer(Sqo.IDocumentSerializer)">
      <summary>
            Set your custom document serializer
            </summary>
      <param name="documentSerializer">The instance of custom document serializer</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.ApplyConfigurator(Sqo.Configurator)">
      <summary>
            Apply default configurations
            </summary>
      <param name="config">Configurator instance</param>
    </member>
    <member name="P:Sqo.SiaqodbConfigurator.EncryptedDatabase">
      <summary>
            Set if database will be encrypted or not
            </summary>
    </member>
    <member name="T:Sqo.SiaqodbUtil">
      <summary>
            Database utilities
            </summary>
    </member>
    <member name="M:Sqo.SiaqodbUtil.ReIndexAsync(Windows.Storage.StorageFolder)">
      <summary>
            Rebuild and defragment indexes
            </summary>
      <param name="siaqodb">
      </param>
    </member>
    <member name="M:Sqo.SiaqodbUtil.ShrinkAsync(Windows.Storage.StorageFolder,Sqo.ShrinkType)">
      <summary>
            Shrink database files including rawdata.sqr and indexes 
            </summary>
    </member>
    <member name="M:Sqo.SiaqodbUtil.RepairAsync(Windows.Storage.StorageFolder)">
      <summary>
            Repair database files by fixing corrupted objects bytes
            </summary>
      <param name="siaqodb">
      </param>
    </member>
    <member name="M:Sqo.SiaqodbUtil.RepairTypeAsync``1(Windows.Storage.StorageFolder)">
      <summary>
            Repair database file of Type provided, the corrupted objects will be recuperated or deleted
            </summary>
      <param name="siaqodb">
      </param>
    </member>
    <member name="F:Sqo.ShrinkType.Normal">
      <summary>
            Normal shrink, all blocks marked as free will be supressed 
             </summary>
    </member>
    <member name="F:Sqo.ShrinkType.ForceClaimSpace">
      <summary>
            All database files will be parsed and check if a block can be marked as free then supress free blocks;
            This operation can be slow if your database is big.
            </summary>
    </member>
    <member name="F:Sqo.ShrinkType.Total">
      <summary>
            This includes Normal + ForceClaimSpace but also shrink of every db file; after this operation OID values of the stored objects may change.
            </summary>
    </member>
    <member name="M:Sqo.SqoStringExtensions.Contains(System.String,System.String,System.StringComparison)">
      <summary>
             Returns a value indicating whether the specified System.String object occurs
               within this string.A parameter specifies the type of search
                to use for the specified string.
            </summary>
      <param name="stringObj">Input string</param>
      <param name="value">The string to seek.</param>
      <param name="comparisonType"> One of the enumeration values that specifies the rules for the search.</param>
      <returns>true if the value parameter occurs within this string, or if value is the
                empty string (""); otherwise, false.</returns>
    </member>
    <member name="T:Sqo.SqoDataObject">
      <summary>
            Basic class that any siaqodb storable class may inherits from 
            </summary>
    </member>
    <member name="P:Sqo.SqoDataObject.OID">
      <summary>
            Object Identifier(unique per Type)
            </summary>
    </member>
    <member name="M:Sqo.Transactions.Transaction.Commit">
      <summary>
            Commit transaction to database
            </summary>
    </member>
    <member name="M:Sqo.Transactions.Transaction.CommitAsync">
      <summary>
            Commit transaction to database
            </summary>
    </member>
    <member name="M:Sqo.Transactions.Transaction.Rollback">
      <summary>
            Rollback changes
            </summary>
    </member>
    <member name="M:Sqo.Transactions.Transaction.RollbackAsync">
      <summary>
            Rollback changes
            </summary>
    </member>
    <member name="M:Sqo.Transactions.Transaction.GetUnCommittedObjects``1">
      <summary>
            Load un-committen objects,except deleted instances
            </summary>
      <typeparam name="T">Type of un-committen objects</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Transactions.Transaction.GetUnCommittedObjects``1(System.Boolean)">
      <summary>
            Load un-committen objects
            </summary>
      <typeparam name="T">Type of un-committen objects</typeparam>
      <param name="includeDeletes">If true, will be returned also deleted objects within the transaction</param>
      <returns>
      </returns>
    </member>
  </members>
</doc>